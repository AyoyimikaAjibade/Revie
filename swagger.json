{
    "openapi": "3.0.0",
    "info": {
        "description": "This is a documentation for all Revie api",
        "version": "1.0.0",
        "title": "Revie"
    },
    "paths": {
        "/api/v1/users": {
            "get": {
                "tags": ["User"],
                "summary": "Retrieving all users in database",
                "description": "All user that has signed up or created will be retreived",
                "operationId": "getAllUsers",
                "responses": {
                    "200": {
                        "description": "Successful Operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/getUserRes"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            },
            "post": {
                "tags": ["User"],
                "summary": "Create User",
                "description": "A user account will not be created as this route is not defined. Please use '/signup' route",
                "operationId": "CreateUser",
                "responses": {
                    "201": {
                        "description": "Please use '/signup' route"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                },
                "requestBody": {
                    "content":null,
                    "description": "Do not Input the required data for singing user into Revie. Please use '/signup' route"

                }
            }
        },
        "/api/v1/users/:id": {
            "get": {
                "tags": ["User"],
                "summary": "Fetch User Data",
                "description": "The data related to the user id provided will be returned",
                "operationId": "getUserById",
                "parameters": [{
                    "in": "path",
                    "name": "id",
                    "required": true,
                    "schema":{
                        "type": "string"
                    },
                    "description": "An id associated with a user"
                }],
                "responses": {
                    "200": {
                        "description": "User data fetched",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/getUserRes"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            },
            "patch": {
                "tags": ["User"],
                "summary": "Admin will modifying the details of a user using the provided data",
                "description": "A user with the provided user id will be update using the provided request body restricted to only 'Admin' ",
                "operationId": "updateUser",
                "parameters": [{
                    "in": "path",
                    "name": "id",
                    "schema":{
                        "type": "string"
                    },
                    "required": true,
                    "description": "An id associated with a user"
                }],
                "responses": {
                    "200": {
                        "description": "User Succesfully Updated!",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/createUserRes"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/createUserReq"
                            }
                        }
                    },
                    "description": "The user will provide the admin the name, email, role, e.t.c when updating the account. This route is not for password updates.",
                    "required": true
                }
            },
            "delete": {
                "tags": ["User"],
                "summary": "Admin will be able to delete a particular user",
                "description": "Admin will be able to delete a particular user for several reasons",
                "operationId": "deleteUser",
                "parameters": [{
                    "in": "path",
                    "name": "id",
                    "schema":{
                        "type": "string"
                    },
                    "required": true,
                    "description": "An id associated with a user"
                }],
                "responses": {
                    "204": {
                        "description": "User Succesfully deleted"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            }
        },
        "/api/v1/users/login":{
            "post": {
                "tags": ["Authentication"],
                "summary": "User login",
                "description": "An email and password will be provided by the user which will be authenticated and if proven authentic, the user will be logged in",
                "operationId": "userLogin",
                "responses": {
                    "200": {
                        "description": "User logged in successfully!",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/loginRes"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/userLoginReq"
                            }
                        }
                    },
                    "description": "Data to be provided by the user for successful login",
                    "required": true
                }
            }
        },
        "/api/v1/users/signup": {
            "post": {
                "tags": ["Authentication"],
                "summary": "Create User",
                "description": "A user account will be created for the user if all required details are provided",
                "operationId": "CreateUser",
                "responses": {
                    "200": {
                        "description": "User created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/createUserRes"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/createUserReq"
                            }
                        }
                    },
                    "description": "Input the required data for siging user into Revie",
                    "required": true
                }
            }
        },
        "/api/v1/users/me": {
            "get": {
                "tags": ["User"],
                "summary": "Fetch Currently Logged in User Data",
                "description": "The data related to the user id provided will be returned",
                "operationId": "getCurrentUser",
                "responses": {
                    "200": {
                        "description": "User data fetched",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/getUserRes"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            }
        },
        "/api/v1/users/updateMe": {
            "patch": {
                "tags": ["User"],
                "summary": "Update currently Logged in User Data",
                "description": "The data related to the currently logged in user will be returned. This route is not for password updates.",
                "operationId": "updateCurrentUser",
                "responses": {
                    "200": {
                        "description": "User data updated sucessfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/getUserRes"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/updateUserReq"
                            }
                        }
                    },
                    "description": "The currrently logged in user will only provide the name, email when updating the account. This route is not for password updates.",
                    "required": true
                }
            }
        },
        "api/v1/reviews":{
            "get": {
                "tags": ["Review"],
                "summary": "Retrieving all reviews in database",
                "description": "All created review will be retreived",
                "operationId": "getAllReviews",
                "responses": {
                    "200": {
                        "description": "Successful Operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/getReviewRes"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            },
            "post": {
                "tags": ["Review"],
                "summary": "Create Review",
                "description": "A review is be created by the user if all required details are provided",
                "operationId": "CreateReview",
                "responses": {
                    "200": {
                        "description": "Review created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/getReviewRes"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/createReviewReq"
                            }
                        }
                    },
                    "description": "Input the required data for siging user into Revie",
                    "required": true
                }
            }
        },
        "api/v1/reviews/:id":{
            "get": {
                "tags": ["Review"],
                "summary": "Fetch Review Data",
                "description": "The data related to the review id provided will be returned",
                "operationId": "getReviewById",
                "parameters": [{
                    "in": "path",
                    "name": "id",
                    "required": true,
                    "schema":{
                        "type": "string"
                    },
                    "description": "An id associated with a review"
                }],
                "responses": {
                    "200": {
                        "description": "Review data fetched",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/getReviewRes"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            },
            "put": {
                "tags": ["Review"],
                "summary": "User or Admin will modifying the data of a review using the provided data and id",
                "description": "A user or admin only will modifying the data of a review using the provided data and id",
                "operationId": "updateReview",
                "parameters": [{
                    "in": "path",
                    "name": "id",
                    "schema":{
                        "type": "string"
                    },
                    "required": true,
                    "description": "An id associated with a review"
                }],
                "responses": {
                    "200": {
                        "description": "Review Succesfully Updated!",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/getReviewRes"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/createReviewReq"
                            }
                        }
                    },
                    "description": "The user will provide the review the ratings, images, category, e.t.c when updating the review.",
                    "required": true
                }
            },
            "delete": {
                "tags": ["Review"],
                "summary": "User will be able to delete a particular review",
                "description": "User will be able to delete a particular review if deemed inappropriate.",
                "operationId": "deleteReview",
                "parameters": [{
                    "in": "path",
                    "name": "id",
                    "schema":{
                        "type": "string"
                    },
                    "required": true,
                    "description": "An id associated with a review"
                }],
                "responses": {
                    "204": {
                        "description": "Reveiw Succesfully deleted"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                }
            }
        },
        "api/v1/reviews/mark-as-helpful/:id":{
            "put": {
                "tags": ["Review"],
                "summary": "User or Guest User will modifying the data of a review using the provided data and id",
                "description": "A user or guestUser only will modifying the review property 'helpful' to either true or false using the provided data and id",
                "operationId": "updateReview",
                "parameters": [{
                    "in": "path",
                    "name": "id",
                    "schema":{
                        "type": "string"
                    },
                    "required": true,
                    "description": "An id associated with a review"
                }],
                "responses": {
                    "200": {
                        "description": "Review Succesfully Marked as helpful!",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/getReviewRes"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "405": {
                        "description": "Method not allowed"
                    },
                    "500": {
                        "description": "Internal error"
                    }
                },
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/markReviewReq"
                            }
                        }
                    },
                    "description": "The user will provide the review the ratings, images, category, e.t.c when updating the review.",
                    "required": true
                }
            }
        }
    },
    "servers": [
        {
            "url": "http://localhost:8000/docs",
            "description": "Local server"
        },
        {   
            "url": "https://reviee.herokuapp.com/docs",
            "description": "Production server"
        }
      ],
      "components":{
        "securitySchemes": {
            "Bearer": {
                "type": "apiKey",
                "name": "Authorization",
                "in": "header"
            }
        },
        "schemas":{
            "loginRes": {
                "type": "object",
                "properties": {
                    "token": {
                        "type":"string",
                        "description": "User access token.",
                        "example":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYwNTA3NjIyZDBhOTdlMjk3Yzg5ZGI1YSIsImlhdCI6MTYxNTkzNDkwNCwiZXhwIjoxNjIzNzEwOTA0fQ.b5mmqUzTRntS0tdT2TnFyKpm8yHUafQTBOTjItz92LQ"
                    },
                    "_id": {
                        "type": "string",
                        "description": "User Id",
                        "example":"6050762240a97e296c89db5a"
                    },
                    "name": {
                        "type": "string",
                        "description": "user's full name",
                        "example":"Burna Boy"
                    },
                    "email": {
                        "type": "string",
                        "description": "user's email",
                        "example":"burnaboy@gmail.io"
                    },
                    "photo": {
                        "type": "string",
                        "description": "user's profile picture",
                        "example":"https://f0.pngfuel.com/png/340/956/profile-user-icon-png-clip-art-thumbnail.png"
                    },
                    "role": {
                        "type": "string",
                        "description": "user's role",
                        "example":"user"
                    }
                
                },
                "xml": {
                    "name": "LoginRes"
                }
            },
            "createUserRes": {
                "type": "object",
                "properties": {
                    "token": {
                        "type":"string",
                        "description": "User access token."
                    },
                    "_id": {
                        "type": "string",
                        "description": "User Id"
                    },
                    "email": {
                        "type": "string",
                        "description": "user's email"
                    },
                    "name": {
                        "type": "string",
                        "description": "user's full name"
                    },
                    "photo": {
                        "type": "string",
                        "description": "user's profile picture"
                    },
                    "role": {
                        "type": "string",
                        "description": "user's role"
                    }
                },
                "xml": {
                    "name": "createUserRes"
                }
            },
            "getUserRes": {
                "type": "object",
                "properties": {
                    "token": {
                        "type":"string",
                        "description": "User access token."
                    },
                    "_id": {
                        "type": "string",
                        "description": "User Id"
                    },
                    "email": {
                        "type": "string",
                        "description": "user's email"
                    },
                    "name": {
                        "type": "string",
                        "description": "user's full name"
                    },
                    "photo": {
                        "type": "string",
                        "description": "user's profile picture"
                    },
                    "role": {
                        "type": "string",
                        "description": "user's role"
                    }
                },
                "xml": {
                    "name": "getUserRes"
                }
            },
            "getReviewRes": {
                "type": "object",
                "properties": {
                    "_id": {
                        "type": "string",
                        "description": "Review Id"
                    },
                    "review": {
                        "type": "string",
                        "description": "The Review Text"
                    },
                    "rating": {
                        "type": "number",
                        "description": "Review ratings minimum of 0.0 and maximum of 5.0"
                    },
                    "images": {
                        "type": "string",
                        "description": "review images max of 3"
                    },
                    "video": {
                        "type": "string",
                        "description": "review Video max 1"
                    },
                    "helpful": {
                        "type": "boolean",
                        "description": "Determine if a review is helpful to users"
                    },
                    "helpfulCount": {
                        "type": "string",
                        "description": "The total of helful if the user increase if select true or else decrease it"
                    },
                    "category": {
                        "type": "string",
                        "description": "user's category i.e ['landlords', 'environments', 'qualityOfAmenities']"
                    },
                    "createdAt": {
                        "type": "date",
                        "description": "The date a review is created default to Date.now()"
                    },
                    "user": {
                        "type": "string",
                        "description": "review user"
                    },
                    "apartmentAddresse": {
                        "type": "string",
                        "description": "The location of the apartment that has review"
                    }
                },
                "xml": {
                    "name": "getReviewRes"
                }
            },
         

            "userLoginReq": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "User email",
                        "example":"burnaboy@gmail.io"
                    },
                    "password": {
                        "type": "string",
                        "description": "User password",
                        "example":"burna1234"
                    }
                },
                "xml": {
                    "name": "LoginRes"
                }
            },
            "createUserReq": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "user's email"
                    },
                    "name": {
                        "type": "string",
                        "description": "user's full name"
                    },
                    "role": {
                        "type": "string",
                        "description": "user's role"
                    },
                    "password": {
                        "type": "string",
                        "description": "user password"
                    },
                    "confirmPassword": {
                        "type": "string",
                        "description": "user confirmed password"
                    }
                },
                "xml": {
                    "name": "createUserRes"
    
                }
            },
            "updateUserReq": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "user's email"
                    },
                    "name": {
                        "type": "string",
                        "description": "user's name"
                    }
                },
                "xml": {
                    "name": "getUserRes"
    
                }
            },
            "createReviewReq":{
                "type": "object",
                "properties": {
                    "review": {
                        "type": "string",
                        "description": "The Review Text"
                    },
                    "rating": {
                        "type": "number",
                        "description": "Review ratings minimum of 0.0 and maximum of 5.0"
                    },
                    "images": {
                        "type": "string",
                        "description": "review images max of 3"
                    },
                    "video": {
                        "type": "string",
                        "description": "review Video max 1"
                    },
                    "helpful": {
                        "type": "boolean",
                        "description": "Determine if a review is helpful to users"
                    },
                    "helpfulCount": {
                        "type": "string",
                        "description": "The total of helful if the user increase if select true or else decrease it"
                    },
                    "category": {
                        "type": "string",
                        "description": "user's category i.e ['landlords', 'environments', 'qualityOfAmenities']"
                    },
                    "createdAt": {
                        "type": "date",
                        "description": "The date a review is created default to Date.now()"
                    },
                    "user": {
                        "type": "string",
                        "description": "review user"
                    },
                    "apartmentAddresse": {
                        "type": "string",
                        "description": "The location of the apartment that has review"
                    }
                },
                "xml": {
                    "name": "createUserRes"
    
                }
            },
            "markReviewReq":{
                "type": "object",
                "properties": {
                    "email": {
                        "type": "boolean",
                        "description": "Update if user choice is either true or false",
                        "example":"true"
                    }
                },
                "xml": {
                    "name": "markReviewReq"
                }
            }
        }
      }
}